from .tester import Tester


class JUnitCreator:

    def __init__(self, tester):
        if tester is None or not isinstance(tester, Tester):
            raise ValueError("No or invalid tester provided.")

        self._tester = tester

    @staticmethod
    def _primitive_escape(insecure_string):
        """
        Basically the most simple escaping function.
        :param insecure_string: The string that needs to be escaped. Please note that existing entities will be
        escaped too. (e.g. &amp; will become &amp;amp;)
        :return: Escaped String
        """
        insecure_string = insecure_string.replace("&", "&amp;")
        insecure_string = insecure_string.replace("<", "&lt;")
        insecure_string = insecure_string.replace(">", "&gt;")
        insecure_string = insecure_string.replace("\"", "&quot;")
        insecure_string = insecure_string.replace("\'", "&apos;")
        return insecure_string

    @staticmethod
    def _generate_path_from_tuple(result_tuple):
        """
        Helper function that generates a nice method /path (user) string
        :param result_tuple: The tuple generated by Tester class
        :return: the aforementioned nice string
        """
        path = result_tuple[0]
        method = result_tuple[1].upper()
        user = result_tuple[2]

        return "%s %s (%s)" % (
            JUnitCreator._primitive_escape(method),
            JUnitCreator._primitive_escape(path),
            JUnitCreator._primitive_escape(user)
        )

    @staticmethod
    def _generate_entry(entry_type, result_tuple):
        """
        Generates a entry for a testcase. Can be either a failure, error or skipped entry.
        :param entry_type: Either failure, error or skipped
        :param result_tuple: The tuple generated by Tester class
        :return: XML-String for entry
        """
        if entry_type not in ['failure', 'error', 'skipped']:
            raise ValueError("Invalid entry_type. Can be 'failure', 'error', 'skipped'.")

        xml_message = JUnitCreator._generate_path_from_tuple(result_tuple)
        xml_description = "%s: %s" % (xml_message, JUnitCreator._primitive_escape(result_tuple[3]))

        return '<%s message="%s">%s</%s>' % (entry_type, xml_message, xml_description, entry_type)

    @staticmethod
    def _generate_testcase(entry_type, result_tuple):
        """
        Generates the XML of testcase.
        :param entry_type: Either failure, error or skipped
        :param result_tuple: The tuple generated by Tester class
        :return: XML-String for testcase
        """
        if entry_type not in ['failure', 'error', 'skipped']:
            raise ValueError("Invalid entry_type. Can be 'failure', 'error', 'skipped'.")

        entry = JUnitCreator._generate_entry(entry_type, result_tuple)
        path = JUnitCreator._generate_path_from_tuple(result_tuple)

        return '<testcase name="%s" classname="de.secanium.apiknock">%s</testcase>' % (path, entry)

    def generate_xml(self):
        """
        Generates the actual JUnit XML.
        Format:
        <testsuites>
            <testsuite>
                <testcase>
                    <error />/<failure />
                </testcase>
            </testsuite>
        </testsuites>
        :return: JUnit XML
        """
        error_list = self._tester.get_errors()
        failed_list = self._tester.get_failed()
        total_requests = self._tester.get_total_requests()

        error_cases = ""
        failed_cases = ""

        for error in error_list:
            error_cases += self._generate_testcase('error', error)

        for failed in failed_list:
            failed_cases += self._generate_testcase('failure', failed)

        testsuite = '<testsuite name="de.secanium.apiknock" tests="%d" errors="%d" ' \
                    'failures="%d" id="0">%s%s</testsuite>' % (
                        total_requests,
                        len(error_list),
                        len(failed_list),
                        error_cases,
                        failed_cases
                    )

        return '<?xml version="1.0" encoding="UTF-8" ?><testsuites disabled="0" errors="%d" failures="%s" ' \
               'name="de.secanium.apiknock" tests="%d">%s</testsuites>' % (
                   len(error_list),
                   len(failed_list),
                   total_requests,
                   testsuite
               )
